(() => {
	'use strict';
	let selectedTemplate = 'coverLetter_1',
		delay = 100,
		selectors = {
			pagerNext: '[data-qa="pager-next"]',
			modalOverlay: '[data-qa="modal-overlay"]',
			alertBox: '[data-qa="magritte-alert"]',
			countryConfirmBtn: '[data-qa="relocation-warning-confirm"]',
			vacancyCards: '[data-qa="vacancy-serp__vacancy"]',
			vacancyTitle: "[data-qa='serp-item__title']",
			addCoverLetter: '[data-qa="vacancy-response-letter-toggle-text"]',
			respondBtn: '[data-qa="vacancy-serp__vacancy_response"]',
			respondBtnPopup: '[data-qa="vacancy-response-submit-popup"]',
		},
		sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms)),
		isRunning = false;

	const CONFIG = {
		enabled: true,
		profileData: {
			name: '–ò–º—è',
			experience: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
			skills: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏',
			salary: '–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞',
			location: '–ì–æ—Ä–æ–¥',
			workFormat: '–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
			english: '–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
			education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
			startDate: '–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å',
			achievements: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
		},
	};

	let vacancyContext = { title: '', id: '', url: '', searchUrl: '' };

	function getVacancyTitle() {
		if (
			vacancyContext.title &&
			!isSearchText(vacancyContext.title) &&
			!isSystemMessage(vacancyContext.title)
		) {
			return vacancyContext.title;
		}

		const metaTitleMatch = document.title.match(/–í–∞–∫–∞–Ω—Å–∏—è\s+(.+?)\s+–≤\s+/);
		if (metaTitleMatch) {
			const extractedTitle = metaTitleMatch[1].trim();
			if (!isSearchText(extractedTitle) && !isSystemMessage(extractedTitle)) {
				return extractedTitle;
			}
		}

		const titleSelectors = [
			'h1:not([data-qa="title-description"])',
			'[data-qa="vacancy-title"]:not([data-qa="title-description"])',
			'[data-qa="bloko-header-1"]:not([data-qa="title-description"])',
			'.vacancy-title:not(.title-description)',
			'[data-qa="vacancy-name"]',
			'[itemprop="title"]',
		];

		for (const selector of titleSelectors) {
			const elements = document.querySelectorAll(selector);
			for (const element of elements) {
				if (element && element.textContent) {
					const text = element.textContent.trim();
					if (
						!isSearchText(text) &&
						!isSystemMessage(text) &&
						text.length > 3
					) {
						return text;
					}
				}
			}
		}

		const metaTags = ['meta[property="og:title"]', 'meta[name="title"]'];
		for (const metaSelector of metaTags) {
			const metaEl = document.querySelector(metaSelector);
			if (metaEl && metaEl.content) {
				const content = metaEl.content.trim();
				const titleMatch = content.match(
					/–í–∞–∫–∞–Ω—Å–∏—è\s+(.+?)\s+–≤\s+|^(.+?)\s+‚Äî|^(.+?)\s+\||^(.+?)$/
				);
				if (titleMatch) {
					const extracted = (
						titleMatch[1] ||
						titleMatch[2] ||
						titleMatch[3] ||
						titleMatch[4] ||
						''
					).trim();
					if (
						!isSearchText(extracted) &&
						!isSystemMessage(extracted) &&
						extracted.length > 3
					) {
						return extracted;
					}
				}
			}
		}

		return '–¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é';
	}

	function isSearchText(text) {
		if (!text || typeof text !== 'string') return true;
		const searchPatterns = [
			/–Ω–∞–π–¥–µ–Ω[–∞-—è]*\s+\d+/i,
			/\d+\s+–ø–æ–¥—Ö–æ–¥—è—â[–∞-—è]*/i,
			/\d+\s+–≤–∞–∫–∞–Ω—Å–∏–π/i,
			/—Ä–µ–∑—É–ª—å—Ç–∞—Ç[–∞-—è]*\s+–ø–æ–∏—Å–∫–∞/i,
			/–ø–æ–∏—Å–∫\s+—Ä–∞–±–æ—Ç—ã/i,
			/—Å—Ç—Ä–∞–Ω–∏—Ü[–∞-—è]*\s+\d+/i,
		];
		return searchPatterns.some((pattern) => pattern.test(text));
	}

	function isSystemMessage(text) {
		if (!text || typeof text !== 'string') return true;
		const systemPatterns = [
			/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å\s+–ø–æ–ª—É—á–∏—Ç—å\s+–æ—Ç–∫–ª–∏–∫/i,
			/–Ω–µ\s+–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å/i,
			/–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ\s+–≤\s+—Ç–æ–º\s+–∂–µ\s+–¥—É—Ö–µ/i,
			/–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º/i,
			/—É—Å–ø–µ—à–Ω–æ\s+–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω/i,
			/–≤–∞—à\s+–æ—Ç–∫–ª–∏–∫/i,
		];
		return systemPatterns.some((pattern) => pattern.test(text));
	}

	function setVacancyContext(title, id = '', url = '', searchUrl = '') {
		vacancyContext = { title, id, url: url || window.location.href, searchUrl };
	}

	function forceReturnToSearch() {
		return new Promise((resolve) => {
			console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–∏—Å–∫—É...');

			if (vacancyContext.searchUrl) {
				console.log(
					'üìç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É URL:',
					vacancyContext.searchUrl
				);
				window.location.href = vacancyContext.searchUrl;
			} else {
				console.log('üè† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–æ–∏—Å–∫–∞');
				window.location.href = '/search/vacancy';
			}

			setTimeout(resolve, 2000);
		});
	}

	function waitForSearchPage() {
		return new Promise((resolve) => {
			console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞...');

			const maxAttempts = 30;
			let attempts = 0;

			const checkPage = () => {
				attempts++;
				const currentUrl = window.location.href;
				console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: ${currentUrl}`);

				if (
					(currentUrl.includes('search/vacancy') ||
						currentUrl.includes('vacancies')) &&
					!currentUrl.includes('vacancy_response') &&
					!currentUrl.includes('/vacancy/') &&
					document.querySelectorAll(selectors.vacancyCards).length > 0
				) {
					console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
					resolve();
				} else if (attempts >= maxAttempts) {
					console.log('‚ö†Ô∏è Timeout –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥...');
					forceReturnToSearch().then(resolve);
				} else {
					setTimeout(checkPage, 1000);
				}
			};

			setTimeout(checkPage, 500);
		});
	}

	class VacancyAnalyzer {
		constructor() {
			this.techKeywords = {
				frontend: [
					'react',
					'vue',
					'angular',
					'javascript',
					'typescript',
					'frontend',
					'—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥',
				],
				backend: [
					'node.js',
					'python',
					'java',
					'php',
					'backend',
					'–±—ç–∫–µ–Ω–¥',
					'api',
				],
				qa: ['qa', '—Ç–µ—Å—Ç', '–∞–≤—Ç–æ—Ç–µ—Å—Ç', 'testing'],
				management: ['–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ª–∏–¥', 'lead', 'manager'],
			};
			this.levelKeywords = {
				junior: ['junior', '–¥–∂—É–Ω–∏–æ—Ä', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '–º–ª–∞–¥—à–∏–π'],
				middle: ['middle', '–º–∏–¥–¥–ª', '—Å—Ä–µ–¥–Ω–∏–π'],
				senior: ['senior', '—Å–µ–Ω—å–æ—Ä', '–≤–µ–¥—É—â–∏–π', '—Å—Ç–∞—Ä—à–∏–π'],
			};
		}

		analyzeVacancy(title, description = '') {
			const text = (title + ' ' + description).toLowerCase();
			const analysis = {
				title: title,
				technologies: [],
				level: this.detectLevel(text),
			};

			for (const [category, keywords] of Object.entries(this.techKeywords)) {
				if (keywords.some((keyword) => text.includes(keyword))) {
					analysis.technologies.push(category);
				}
			}
			return analysis;
		}

		detectLevel(text) {
			for (const [level, keywords] of Object.entries(this.levelKeywords)) {
				if (keywords.some((keyword) => text.includes(keyword))) {
					return level;
				}
			}
			return 'middle';
		}
	}

	class AIAssistant {
		constructor() {
			this.patterns = {
				salary: /–∑–∞—Ä–ø–ª–∞—Ç|–æ–∫–ª–∞–¥|–¥–æ—Ö–æ–¥|–∫–æ–º–ø–µ–Ω—Å–∞—Ü|salary/i,
				experience: /–æ–ø—ã—Ç|—Å—Ç–∞–∂|–ª–µ—Ç —Ä–∞–±–æ—Ç—ã|experience/i,
				location: /–≥–æ—Ä–æ–¥|–æ—Ç–∫—É–¥–∞|–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ|location/i,
				format: /—Ñ–æ—Ä–º–∞—Ç|—É–¥–∞–ª–µ–Ω|–æ—Ñ–∏—Å|remote|–≥–∏–±—Ä–∏–¥/i,
				english: /–∞–Ω–≥–ª–∏–π—Å–∫|english|—è–∑—ã–∫/i,
				skills: /–Ω–∞–≤—ã–∫|—É–º–µ–µ—Ç–µ|—Ç–µ—Ö–Ω–æ–ª–æ–≥|—Å—Ç–µ–∫|skill/i,
			};
			this.vacancyAnalyzer = new VacancyAnalyzer();
		}

		generateAnswer(question) {
			const q = question.toLowerCase();
			const profile = CONFIG.profileData;

			if (this.patterns.salary.test(q)) return profile.salary;
			if (this.patterns.location.test(q)) return profile.location;
			if (this.patterns.experience.test(q)) return profile.experience;
			if (this.patterns.format.test(q)) return profile.workFormat;
			if (this.patterns.english.test(q)) return profile.english;
			if (this.patterns.skills.test(q)) return profile.skills;

			return '–ì–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.';
		}

		adaptCoverLetter(baseTemplate, vacancyTitle, vacancyDescription = '') {
			const analysis = this.vacancyAnalyzer.analyzeVacancy(
				vacancyTitle,
				vacancyDescription
			);
			let adaptedLetter = baseTemplate.replace(/{#vacancyName}/g, vacancyTitle);

			const personalizations = this.generatePersonalizations(analysis);
			if (personalizations.length > 0) {
				const parts = adaptedLetter.split('\n\n');
				if (parts.length >= 3) {
					parts.splice(-2, 0, personalizations.join(' '));
				} else {
					parts.splice(-1, 0, personalizations.join(' '));
				}
				adaptedLetter = parts.join('\n\n');
			}

			return adaptedLetter;
		}

		generatePersonalizations(analysis) {
			const personalizations = [];

			if (analysis.technologies.length > 0) {
				const mainTech = analysis.technologies[0];
				const techTexts = {
					frontend: `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.`,
					backend: `–ò–º–µ—é –æ–ø—ã—Ç backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å API.`,
					qa: `–ü–æ–Ω–∏–º–∞—é –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∏–º–µ—é –æ–ø—ã—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`,
					management: `–ò–º–µ—é –æ–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã.`,
				};
				if (techTexts[mainTech]) {
					personalizations.push(techTexts[mainTech]);
				}
			}

			return personalizations;
		}
	}

	const assistant = new AIAssistant();

	let templates = {
		coverLetter_1:
			'–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –í–∞–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è {#vacancyName}. –û–∑–Ω–∞–∫–æ–º–∏–≤—à–∏—Å—å —Å –ø–µ—Ä–µ—á–Ω–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º, –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ –º–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –º–Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n\n–û–±–ª–∞–¥–∞—é –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏. –í —Ä–∞–±–æ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω, –ø—É–Ω–∫—Ç—É–∞–ª–µ–Ω –∏ –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª–µ–Ω.\n\n–ë—É–¥—É —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –∏ –≤–∑–∞–∏–º–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è.\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—é.',
		coverLetter_2:
			'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–° –∏–Ω—Ç–µ—Ä–µ—Å–æ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é {#vacancyName}.\n\n–ò–º–µ—é –±–æ–ª–µ–µ 5 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Ä–∞–±–æ—Ç–∞–ª —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–µ–∫–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n–í —Ä–∞–±–æ—Ç–µ —Ü–µ–Ω—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É –±–∏–∑–Ω–µ—Å—É. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º –∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n\n–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ–±—Å—É–∂—É –¥–µ—Ç–∞–ª–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º.',
		coverLetter_3:
			'–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –ø–æ–∑–∏—Ü–∏—è {#vacancyName} –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–ú–æ–π –æ–ø—ã—Ç –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í–ª–∞–¥–µ—é –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û.\n\n–ì–æ—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–ë—É–¥—É —Ä–∞–¥ –≤—Å—Ç—Ä–µ—á–µ!',
		coverLetter_4:
			'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í–∞–∫–∞–Ω—Å–∏—è {#vacancyName} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ü–µ–ª—è–º.\n\n–í —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ —è –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å –∏ —Å–ª–µ–∂—É –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –ò–º–µ—é –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ.\n\n–£–≤–µ—Ä–µ–Ω, —á—Ç–æ –º–æ–π –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ –ø–æ–∑–≤–æ–ª—è—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n–ñ–¥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.',
		coverLetter_5:
			'–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–û–±—Ä–∞—â–∞—é—Å—å –ø–æ –ø–æ–≤–æ–¥—É –≤–∞–∫–∞–Ω—Å–∏–∏ {#vacancyName}.\n\n–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫–ª–æ –º–µ–Ω—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ.\n\n–ì–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –≤–∑—è—Ç—å—Å—è –∑–∞ –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã.\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!',
	};

	function loadSettings() {
		try {
			const saved = localStorage.getItem('hh_cover_letters');
			if (saved) templates = { ...templates, ...JSON.parse(saved) };

			const savedTemplate = localStorage.getItem('hh_selected_template');
			if (savedTemplate && templates[savedTemplate])
				selectedTemplate = savedTemplate;
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
		}
	}

	function saveSettings() {
		try {
			localStorage.setItem('hh_cover_letters', JSON.stringify(templates));
			localStorage.setItem('hh_selected_template', selectedTemplate);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
		}
	}

	function createEditModal() {
		const modal = document.createElement('div');
		modal.id = 'cover-letter-edit-modal';
		modal.style.cssText = `
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0,0,0,0.7);
			z-index: 10002;
			display: none;
			align-items: center;
			justify-content: center;
		`;

		modal.innerHTML = `
			<div style="background: white; border-radius: 12px; padding: 25px; width: 90%; max-width: 600px; max-height: 80%; overflow-y: auto;">
				<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
					<h3 style="margin: 0; color: #0059b3;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ <span id="edit-template-number"></span></h3>
					<button id="close-edit-modal" style="background: none; border: none; font-size: 24px; cursor: pointer;">‚úñÔ∏è</button>
				</div>
				
				<div style="margin-bottom: 15px;">
					<label style="display: block; margin-bottom: 5px; font-weight: bold;">–¢–µ–∫—Å—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:</label>
					<div style="font-size: 12px; color: #666; margin-bottom: 5px;">
						üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{#vacancyName}</code> –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏<br>
						ü§ñ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∏—Å—å–º–æ –ø–æ–¥ –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é
					</div>
					<textarea id="template-text" style="width: 100%; height: 300px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.4;" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞..."></textarea>
				</div>
				
				<div style="margin-bottom: 20px;">
					<div style="font-weight: bold; margin-bottom: 5px;">üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</div>
					<div id="template-preview" style="border: 1px solid #ddd; padding: 10px; border-radius: 4px; background: #f8f9fa; white-space: pre-wrap; min-height: 100px; font-size: 13px;"></div>
				</div>
				
				<div style="display: flex; gap: 10px; justify-content: flex-end;">
					<button id="save-template" style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; font-weight: bold;">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
					<button id="cancel-edit" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">‚ùå –û—Ç–º–µ–Ω–∞</button>
				</div>
			</div>
		`;

		document.body.appendChild(modal);

		const textarea = modal.querySelector('#template-text');
		const preview = modal.querySelector('#template-preview');

		function updatePreview() {
			const text = textarea.value.replace(
				'{#vacancyName}',
				'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
			);
			preview.textContent =
				text || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...';
		}

		textarea.addEventListener('input', updatePreview);

		function closeModal() {
			modal.style.display = 'none';
		}

		modal
			.querySelector('#close-edit-modal')
			.addEventListener('click', closeModal);
		modal.querySelector('#cancel-edit').addEventListener('click', closeModal);

		modal.addEventListener('click', (event) => {
			if (event.target === modal) {
				closeModal();
			}
		});

		modal.querySelector('#save-template').addEventListener('click', () => {
			const templateKey = modal.dataset.editingTemplate;
			const newText = textarea.value.trim();

			if (newText) {
				templates[templateKey] = newText;
				saveSettings();
				updateTemplateButtons();
				closeModal();
			} else {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞');
			}
		});

		return modal;
	}

	function openTemplateEditor(templateKey) {
		const modal = document.getElementById('cover-letter-edit-modal');
		const templateNumber = templateKey.replace('coverLetter_', '');

		modal.dataset.editingTemplate = templateKey;
		modal.querySelector('#edit-template-number').textContent = templateNumber;
		modal.querySelector('#template-text').value = templates[templateKey] || '';

		const updatePreview = () => {
			const text = modal
				.querySelector('#template-text')
				.value.replace('{#vacancyName}', 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫');
			modal.querySelector('#template-preview').textContent =
				text || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...';
		};
		updatePreview();

		modal.style.display = 'flex';
	}

	function setReactValue(element, value) {
		if (!element || !value) return;

		element.focus();
		element.click();
		element.value = '';

		const nativeInputValueSetter = Object.getOwnPropertyDescriptor(
			window.HTMLTextAreaElement.prototype,
			'value'
		).set;
		nativeInputValueSetter.call(element, value);

		element.dispatchEvent(
			new Event('input', { bubbles: true, cancelable: true })
		);
		element.dispatchEvent(
			new Event('change', { bubbles: true, cancelable: true })
		);
		element.value = value;
	}

	async function findAndAnswerQuestions() {
		await sleep(200);
		let questionsAnswered = 0;
		const allTextareas = document.querySelectorAll(
			'textarea[name*="task"]:not([name="letter"])'
		);

		for (const textarea of allTextareas) {
			if (!textarea.value && textarea.offsetParent !== null) {
				const parent =
					textarea.closest('[data-qa="task-body"]') ||
					textarea.closest('.bloko-control-group');
				if (parent) {
					const questionText = parent.textContent
						.trim()
						.replace('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', '')
						.replace(
							'–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è',
							''
						)
						.trim();

					if (questionText && questionText.length > 10) {
						const answer = assistant.generateAnswer(questionText);
						setReactValue(textarea, answer);
						questionsAnswered++;
						await sleep(50);
					}
				}
			}
		}

		return questionsAnswered;
	}

	async function fillCoverLetter(coverLetterKey, vacancyName) {
		await sleep(1000);

		let targetInput = document.querySelector('textarea[name="letter"]');

		if (!targetInput) {
			const addLetterBtns = [
				document.querySelector(
					'[data-qa="vacancy-response-letter-toggle-text"]'
				),
				document.querySelector('[data-qa="vacancy-response-letter-toggle"]'),
				...Array.from(document.querySelectorAll('button, span')).filter((el) =>
					el.textContent.toLowerCase().includes('—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ')
				),
			].filter(Boolean);

			if (addLetterBtns.length > 0) {
				addLetterBtns[0].click();
				await sleep(1500);
				targetInput = document.querySelector('textarea[name="letter"]');
			}
		}

		if (!targetInput) {
			const allTextareas = document.querySelectorAll('textarea');
			for (const textarea of allTextareas) {
				const isVisible = textarea.offsetParent !== null;
				const isEmpty = !textarea.value;
				const notTask = !textarea.name?.includes('task');

				if (
					isVisible &&
					isEmpty &&
					notTask &&
					!textarea.name?.includes('comment')
				) {
					targetInput = textarea;
					break;
				}
			}
		}

		if (targetInput) {
			const vacancyDescription =
				document.querySelector('[data-qa="vacancy-description"]')
					?.textContent || '';
			const coverText = assistant.adaptCoverLetter(
				templates[coverLetterKey],
				vacancyName,
				vacancyDescription
			);

			targetInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
			await sleep(100);
			setReactValue(targetInput, coverText);

			await sleep(100);
			if (targetInput.value !== coverText) {
				targetInput.focus();
				targetInput.click();
				await sleep(100);
				targetInput.value = coverText;
				targetInput.dispatchEvent(new Event('input', { bubbles: true }));
			}

			return true;
		}

		return false;
	}

	async function findAndClickRespondButton() {
		await sleep(500);

		const respondBtns = [
			document.querySelector('[data-qa="vacancy-response-submit-popup"]'),
			document.querySelector('[data-qa="vacancy-response-letter-submit"]'),
			...Array.from(document.querySelectorAll('button')).filter((btn) =>
				btn.textContent?.trim().toLowerCase().includes('–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è')
			),
		].filter(Boolean);

		if (respondBtns.length > 0) {
			const finalBtn = respondBtns[respondBtns.length - 1];
			finalBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
			await sleep(300);
			finalBtn.click();

			console.log('üì§ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É...');
			await sleep(3000);

			return true;
		}

		return false;
	}

	async function processModal(vacancyName) {
		console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–∏–∫–∞');
		if (CONFIG.enabled) await findAndAnswerQuestions();
		await fillCoverLetter(selectedTemplate, vacancyName);
		await sleep(200);
		await findAndClickRespondButton();
	}

	async function processResponsePage() {
		console.log('üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∫–ª–∏–∫–∞');
		const vacancyTitle = getVacancyTitle();
		await sleep(1000);

		if (CONFIG.enabled) {
			const answered = await findAndAnswerQuestions();
		}

		await sleep(200);
		await fillCoverLetter(selectedTemplate, vacancyTitle);
		await sleep(200);

		const buttonClicked = await findAndClickRespondButton();

		console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–∏—Å–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞...');
		await forceReturnToSearch();

		return buttonClicked;
	}

	async function startProcessing() {
		const button = document.getElementById('mb-start-stop');
		if (isRunning) {
			isRunning = false;
			button.style.backgroundColor = '#28a745';
			button.innerHTML = '‚ñ∂Ô∏è –°–¢–ê–†–¢';
			return;
		}

		isRunning = true;
		button.style.backgroundColor = '#dc3545';
		button.innerHTML = '‚èπÔ∏è –°–¢–û–ü';

		try {
			const currentUrl = window.location.href;

			if (currentUrl.includes('applicant/vacancy_response')) {
				await processResponsePage();
			} else if (
				currentUrl.includes('/vacancy/') &&
				!currentUrl.includes('search')
			) {
				const respondBtn = document.querySelector(
					'[data-qa="vacancy-response-link-top"]'
				);
				if (respondBtn) {
					respondBtn.click();
					await sleep(500);
					await processResponsePage();
				}
			} else if (
				currentUrl.includes('search/vacancy') ||
				currentUrl.includes('vacancies')
			) {
				const searchUrl = window.location.href;
				let processedCount = 0;
				let consecutiveErrors = 0;

				while (isRunning && consecutiveErrors < 5) {
					console.log(`üîÑ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ø—ã—Ç–∫–∞ ${consecutiveErrors + 1}/5`);

					await sleep(2000);

					const vacancyCards = document.querySelectorAll(
						selectors.vacancyCards
					);
					console.log(
						`üîç –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${vacancyCards.length}`
					);

					if (vacancyCards.length === 0) {
						const nextBtn = document.querySelector(selectors.pagerNext);
						if (nextBtn && !nextBtn.disabled) {
							console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
							nextBtn.click();
							await sleep(3000);
							continue;
						} else {
							console.log('‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
							break;
						}
					}

					let foundVacancy = false;
					for (const card of vacancyCards) {
						if (!isRunning) break;

						const respondBtn = card.querySelector(selectors.respondBtn);
						if (
							!respondBtn ||
							!respondBtn.innerText?.includes('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è')
						) {
							continue;
						}

						foundVacancy = true;
						const vacancyTitleElement = card.querySelector(
							selectors.vacancyTitle
						);
						let vacancyTitle = vacancyTitleElement?.innerText || '–≤–∞–∫–∞–Ω—Å–∏—é';

						if (isSearchText(vacancyTitle) || isSystemMessage(vacancyTitle)) {
							const vacancyLink = card.querySelector('a[href*="/vacancy/"]');
							if (vacancyLink) vacancyTitle = vacancyLink.textContent.trim();
						}

						const vacancyId =
							card
								.querySelector('a[href*="/vacancy/"]')
								?.href.match(/\/vacancy\/(\d+)/)?.[1] || '';
						setVacancyContext(vacancyTitle, vacancyId, '', searchUrl);

						try {
							processedCount++;
							console.log(
								`üìù [${processedCount}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${vacancyTitle}`
							);

							card.scrollIntoView({ behavior: 'smooth', block: 'center' });
							card.style.border = '2px solid #0059b3';

							respondBtn.click();
							await sleep(2000);

							const isModal = document.querySelector(selectors.modalOverlay);
							if (isModal) {
								await processModal(vacancyTitle);
							} else {
								await sleep(1000);
								await processResponsePage();
							}

							card.style.border = '';
							consecutiveErrors = 0;

							console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É...');
							await waitForSearchPage();

							break;
						} catch (error) {
							console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
							consecutiveErrors++;
							card.style.border = '';

							console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
							await forceReturnToSearch();
							await waitForSearchPage();
							break;
						}
					}

					if (!foundVacancy) {
						const nextBtn = document.querySelector(selectors.pagerNext);
						if (nextBtn && !nextBtn.disabled && isRunning) {
							console.log(
								'‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π)'
							);
							nextBtn.click();
							await sleep(3000);
							consecutiveErrors = 0;
						} else {
							console.log('‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π');
							break;
						}
					}
				}

				console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${processedCount}`);
			}
		} catch (error) {
			console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
		} finally {
			isRunning = false;
			button.style.backgroundColor = '#28a745';
			button.innerHTML = '‚ñ∂Ô∏è –°–¢–ê–†–¢';
		}
	}

	function createPanel() {
		const panel = document.createElement('div');
		panel.style.cssText = `
			position: fixed; bottom: 20px; right: 20px; background: white;
			border: 2px solid #0059b3; border-radius: 12px; padding: 20px;
			z-index: 10000; box-shadow: 0 4px 16px rgba(0,0,0,0.2);
			font-size: 12px; width: 280px; font-family: Arial, sans-serif;
		`;

		panel.innerHTML = `
			<div style="font-weight: bold; color: #0059b3; margin-bottom: 15px; display: flex; justify-content: space-between; align-items: center;">
				<span>üì∑ MadnessBrains HH Bot</span>
				<button id="mb-minimize" style="background: none; border: none; cursor: pointer; font-size: 16px;">_</button>
			</div>
			
			<div style="margin-bottom: 15px;">
				<div style="font-weight: bold; margin-bottom: 8px; color: #333;">üìù –®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º:</div>
				<div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 3px; margin-bottom: 8px;">
					<button class="mb-template-btn" data-template="coverLetter_1" style="padding: 6px 3px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; font-size: 10px; background: #f8f9fa;">üìù 1</button>
					<button class="mb-template-btn" data-template="coverLetter_2" style="padding: 6px 3px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; font-size: 10px; background: #f8f9fa;">üìÑ 2</button>
					<button class="mb-template-btn" data-template="coverLetter_3" style="padding: 6px 3px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; font-size: 10px; background: #f8f9fa;">üìÑ 3</button>
					<button class="mb-template-btn" data-template="coverLetter_4" style="padding: 6px 3px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; font-size: 10px; background: #f8f9fa;">üìÑ 4</button>
					<button class="mb-template-btn" data-template="coverLetter_5" style="padding: 6px 3px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; font-size: 10px; background: #f8f9fa;">üìÑ 5</button>
				</div>
				<button id="edit-templates" style="width: 100%; padding: 8px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px; margin-bottom: 10px;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã</button>
			</div>
			
			<button id="mb-start-stop" style="width: 100%; padding: 12px; background: #28a745; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: bold; font-size: 16px;">
				‚ñ∂Ô∏è –°–¢–ê–†–¢
			</button>
		`;

		document.body.appendChild(panel);

		const minimizeBtn = document.createElement('button');
		minimizeBtn.innerHTML = 'üì∑';
		minimizeBtn.style.cssText = `
			position: fixed; bottom: 20px; right: 20px; width: 50px; height: 50px;
			border-radius: 50%; background: #0059b3; color: white; border: none;
			cursor: pointer; font-size: 24px; z-index: 10001; display: none;
			box-shadow: 0 4px 12px rgba(0,0,0,0.3);
		`;
		document.body.appendChild(minimizeBtn);

		document.getElementById('mb-minimize').addEventListener('click', () => {
			panel.style.display = 'none';
			minimizeBtn.style.display = 'block';
		});

		minimizeBtn.addEventListener('click', () => {
			panel.style.display = 'block';
			minimizeBtn.style.display = 'none';
		});

		document.querySelectorAll('.mb-template-btn').forEach((btn) => {
			btn.addEventListener('click', () => {
				selectedTemplate = btn.dataset.template;
				saveSettings();
				updateTemplateButtons();
			});
		});

		document.getElementById('edit-templates').addEventListener('click', () => {
			const templateKey = selectedTemplate;
			openTemplateEditor(templateKey);
		});

		document
			.getElementById('mb-start-stop')
			.addEventListener('click', startProcessing);
		updateTemplateButtons();
	}

	function updateTemplateButtons() {
		for (let i = 1; i <= 5; i++) {
			const btn = document.querySelector(`[data-template="coverLetter_${i}"]`);
			if (btn) {
				const templateKey = `coverLetter_${i}`;
				if (templateKey === selectedTemplate) {
					btn.style.background = '#0059b3';
					btn.style.color = 'white';
				} else {
					btn.style.background = '#f8f9fa';
					btn.style.color = '#333';
				}
			}
		}
	}

	(async function init() {
		loadSettings();
		await sleep(delay);
		createPanel();
		createEditModal();

		if (window.location.href.includes('vacancy_response')) {
			setTimeout(async () => {
				if (CONFIG.enabled) {
					const answered = await findAndAnswerQuestions();
					const vacancyName = getVacancyTitle();
					await fillCoverLetter(selectedTemplate, vacancyName);
				}
			}, 2000);
		}
	})();
})();
